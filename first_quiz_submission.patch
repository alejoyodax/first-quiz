diff --git a/part1/question1.py b/part1/question1.py
index 5c99fdb..82c3dba 100644
--- a/part1/question1.py
+++ b/part1/question1.py
@@ -16,20 +16,23 @@
 def get_city_temperature(city):
    if city == "Quito":
       return 22
-   if city == "Sao Paulo":
+   elif city == "Sao Paulo":
       return 17
-   if city == "San Francisco":
+   elif city == "San Francisco":
       return 16
+   elif city == "New York":
+      return 14
 
 def get_city_weather(city):
+	# print(city)
+	sky_condition = None
 
-  sky_condition = None
-
-  if city == "Sao Paulo":
-     sky_condition = "cloudy"
-  elif city == "New York":
-     sky_condition = "rainy"
-
-  temperature = get_city_temperature(city)
-
-  return str(temperature) + " degrees and " + sky_condition
\ No newline at end of file
+	if city == "Sao Paulo":
+		sky_condition = "cloudy"
+	elif city == "New York":
+		sky_condition = "rainy"
+	elif city == "Quito":
+		sky_condition = "sunny"
+	
+	temperature = get_city_temperature(city)
+	return f'{temperature} degrees and {sky_condition}'
\ No newline at end of file
diff --git a/part1/question2.py b/part1/question2.py
index 34a9b01..e453d0d 100644
--- a/part1/question2.py
+++ b/part1/question2.py
@@ -15,7 +15,8 @@
 # it. As always, there is a test suite that checks the result. It is in 
 # `question2_test.py.`
 
-swapper = None
+def swapper(tup):
+   return tuple((tup[1],tup[0]))
 
 def run_swapper(list_of_tuples):
   return list(map(swapper, list_of_tuples))
\ No newline at end of file
diff --git a/part1/question3.py b/part1/question3.py
index 04fab99..b163c67 100644
--- a/part1/question3.py
+++ b/part1/question3.py
@@ -26,8 +26,31 @@
 # formulas and their outputs in the test file, `question3_test.py`.
 
 # This function should return an oven instance!
-def make_oven():
-  None
+class make_oven:
+  def __init__(self):
+    self.ingredients = list()
+    self.output = None
+
+  def add(self, newIngredient):
+    self.ingredients.append(newIngredient)
+     
+  def freeze(self):
+    if("water" in self.ingredients and "air" in self.ingredients):
+      self.output = "snow"
+      return
+
+  def boil(self):
+    if("lead" in self.ingredients and "mercury" in self.ingredients):
+      self.output = "gold"
+    if "cheese" in self.ingredients and "dough" in self.ingredients and "tomato" in self.ingredients:
+      self.output = "pizza"
+      return
+      
+  def wait(self):
+      return
+
+  def get_output(self):
+    return self.output
 
 def alchemy_combine(oven, ingredients, temperature):
   
@@ -41,4 +64,5 @@ def alchemy_combine(oven, ingredients, temperature):
   else:
     oven.wait()
 
+  print(oven.output)
   return oven.get_output()
\ No newline at end of file
diff --git a/part1/question3_test.py b/part1/question3_test.py
index 6cb6c89..0dee4e2 100644
--- a/part1/question3_test.py
+++ b/part1/question3_test.py
@@ -1,3 +1,5 @@
+from question3 import make_oven, alchemy_combine
+
 def test_alchemy_combine():
 
   assert alchemy_combine(
diff --git a/part1/question4.py b/part1/question4.py
index 1e1b2bf..8359210 100644
--- a/part1/question4.py
+++ b/part1/question4.py
@@ -23,9 +23,9 @@ import pets_db
 # The output should be a list of tuples in the format: (<pet name>, <species>, <age>)
 
 sql_pets_owned_by_nobody = """
-
-Your SQL here.
-
+SELECT name, species, age FROM people_animals
+RIGHT JOIN animals on people_animals.pet_id = animals.animal_id
+WHERE owner_id IS NULL
 """
 
 # Part 4.B:
@@ -33,9 +33,10 @@ Your SQL here.
 # The output should be an integer.
 
 sql_pets_older_than_owner = """
-
-Your SQL here.
-
+SELECT COUNT(*) FROM animals
+LEFT JOIN people_animals on people_animals.pet_id = animals.animal_id
+LEFT JOIN people on people.person_id = people_animals.owner_id
+WHERE animals.age > people.age;
 """
 
 # Part 4.C: BONUS CHALLENGE! 
@@ -43,6 +44,6 @@ Your SQL here.
 # The output should be a list of tuples in the format: (<person name>, <pet name>, <species>)
 sql_only_owned_by_bessie = """ 
 
-Your SQL here.
+
 
 """
\ No newline at end of file
diff --git a/part1/question5.py b/part1/question5.py
index f76654f..dfbd4af 100644
--- a/part1/question5.py
+++ b/part1/question5.py
@@ -20,7 +20,11 @@
 
 sql_create_favorite_foods = """
 
-Your SQL here.
+CREATE TABLE favorite_foods (
+      food_id integer,
+      name text not null,
+      vegetarian integer
+    );
 
 """
 
@@ -30,7 +34,8 @@ Your SQL here.
 
 sql_alter_tables_with_favorite_food = """
 
-Your SQL here.
+ALTER TABLE animals ADD COLUMN favorite_food_id text AFTER age;
+ALTER TABLE people ADD COLUMN favorite_food_id text AFTER favorite_color;
 
 """
 
@@ -40,6 +45,8 @@ Your SQL here.
 
 sql_select_all_vegetarian_pets = """
 
-Your SQL here.
+SELECT animals.name, favorite_foods.name FROM animals
+JOIN favorite_foods on animals.favorite_food_id = favorite_foods.food_id
+WHERE vegetarian = 1;
 
 """
\ No newline at end of file
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
index 85742c4..090d80f 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
@@ -3,7 +3,16 @@ package org.velezreyes.quiz.question6;
 public class VendingMachineImpl {
 
   public static VendingMachine getInstance() {
-    // Fix me!
-    return null;
+      //first create canned drinks to fill the vending machine
+      CannedDrink scott_cola = new CannedDrink("ScottCola", true, 75,10);
+      CannedDrink karen_tea = new CannedDrink("KarenTea", false, 100,10);
+      
+      // create vending machine with cannes inside
+      CannedDrink[] stock = new CannedDrink[50];
+      stock[0] = scott_cola;
+      stock[1] = karen_tea;
+      VendingMachine vm1 = new DrinkVendingMachine(stock);
+      
+      return vm1;
   }
 }
diff --git a/part2/src/test/java/org/velezreyes/quiz/Question6Test.java b/part2/src/test/java/org/velezreyes/quiz/Question6Test.java
index 855e73f..eaf7fdd 100644
--- a/part2/src/test/java/org/velezreyes/quiz/Question6Test.java
+++ b/part2/src/test/java/org/velezreyes/quiz/Question6Test.java
@@ -67,7 +67,7 @@ public class Question6Test {
     vm.insertQuarter();
     vm.insertQuarter();
 
-    // Test that KarenTea costs at least 75 cents.
+    // Test that KarenTea costs more than 75 cents.
     assertThrows(NotEnoughMoneyException.class, () -> {
       vm.pressButton("KarenTea");
     });
